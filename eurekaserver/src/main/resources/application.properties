spring.application.name=eureka-server
server.port=1001

##hostname
eureka.instance.hostname=localhost
##这个eureka server的ip，不是预定义的key，下面要取出来用。上线时要改为真实的ip
eureka.server.ipAddress=127.0.0.1

##由于该应用为注册中心,所以设置为false,代表不向注册中心注册自己
eureka.client.register-with-eureka=false

##是否同步其它Eureka Server节点的数据（复制），默认为true。
##因为只有一个eureka server，所以设置为false
eureka.client.fetch-registry=false

#是否启用服务的自我保护模式，默认为true，调试时设置为false，正式部署设置为true
eureka.server.enableSelfPreservation=false

##这个eureka server的注册中心地址
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

##erueka实例名，注册到eureka server上时，这个名称就代表该服务节点。
##集群使用，只有一个server时可不用
##eureka.instance.instance-id=${eureka.server.ipAddress}:${server.port}

#注册时以ip地址注册，默认以主机名注册。如果注册主机名，使用时还需要转换为ip，浪费时间
eureka.instance.prefer-ip-address=true


##期待心跳间隔时间，默认30s
##表示eureka client发送心跳给server端的频率。
# 如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。
# 除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，
# 则该instance也不会接收到流量。
eureka.server.lease-renewal-interval-in-seconds=10
##清理间隔，每隔60s清理一次无效节点，默认为60000（60s）
eureka.server.eviction-interval-timer-in-ms=60000
##表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，
##在这个时间内若没收到下一次心跳，则将移除该instance
##默认为90秒
##如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
##如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
##该值至少应该大于leaseRenewalIntervalInSeconds
eureka.instance.lease-expiration-duration-in-seconds=30


##响应数据缓存有效期
eureka.server.response-cache-update-interval-ms=3000
#设置缓存过期时间。
##eureka集群时，要从其它server拉取数据，此设置指定拉取的数据的有效期，即每隔多少秒拉取、更新一次
##注意是缓存，是从其他server拉取的，不是本机的注册中心的节点信息，默认180s更新一次
##数值设置大，可用性高，因为其它server下线，本server也可以维持某些节点一段时间，
##但节点信息更新慢，数据一致性差
eureka.server.response-cache-auto-expiration-in-seconds=180


